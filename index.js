var mqtt    = require('mqtt');
var Service, Characteristic;
var state = {
  button: 'low',
  last_button: 'high',
};

module.exports = function (homebridge) {
  Service = homebridge.hap.Service;
  Characteristic = homebridge.hap.Characteristic;

  homebridge.registerAccessory("homebridge-itho-cve-eco-rft", "IthoCVE_ECO_RFT_Ventilation_Accessory", myVentilation);
};

function myVentilation(log, config) {
  this.log = log;

  this.log = log;
  this.name = config["name"];
  this.url = config['url'];
  this.topic = config['topic'];
  this.set_topic = config['set_topic'];
  this.client_Id = 'mqtt_itho_' + Math.random().toString(16).substr(2, 8);
  this.options = {
    keepalive: 10,
    clientId: this.client_Id,
		protocolId: 'MQTT',
    protocolVersion: 4,
		clean: true,
		reconnectPeriod: 1000,
		connectTimeout: 30 * 1000,
    serialnumber: config["serial"] || this.client_Id,
		username: config["username"],
		password: config["password"],
		will: {
			topic: 'WillMsg',
			payload: 'Connection Closed abnormally..!',
			qos: 0,
			retain: false
		},
		rejectUnauthorized: false
  };

  this.client = mqtt.connect(this.url, this.options);
  this.client.subscribe(this.topic);  

  var that = this;

  this.client.on('message', function (topic, message) {
    that.log.debug('Topic: ' + topic);

    try {
      data = JSON.parse(message);
    } catch (e) {
      return null;
    }
    if (data === null) {return null}
      
    that.log.debug('Data: ' + that);

    var state = 0;
    if(data.command === "high") {
      state = 2;
    } else if(data.command === "medium") {
      state = 1;
    } else if(data.command === "low") {
      state = 0;
    }

    that.log.debug('set state to: ' + state);

    state.button = state;
    that.fanService
      .getCharacteristic(Characteristic.RotationSpeed).updateValue(state);

    that.fanService
      .getCharacteristic(Characteristic.Active).updateValue(state);
  });  
}

myVentilation.prototype = {
  getServices: function () {
    this.informationService = new Service.AccessoryInformation();
    this.informationService
      .setCharacteristic(Characteristic.Manufacturer, "Itho CVE")
      .setCharacteristic(Characteristic.Model, "IthoCVE ECO RFT Ventilatio")
      .setCharacteristic(Characteristic.SerialNumber, "123-456-789");

    this.fanService = new Service.Fanv2("Ventilation");
    this.fanService
      .getCharacteristic(Characteristic.Active)
      .on('get', this.getActive.bind(this))
      .on('set', this.setActive.bind(this));
    this.fanService.getCharacteristic(Characteristic.RotationSpeed)
      .setProps({
        minValue: 0,
        maxValue: 2,
        minStep: 1
      })
      //.on('get', this.getSpeed.bind(this))
      .on('set', this.setSpeed.bind(this));

    // this.timerService = new Service.Switch();
    // this.timerService.setCharacteristic(Characteristic.Name, 'Ventilate 10 min');
    // this.timerService.getCharacteristic(Characteristic.On)
    //   .on('get', this.getTimer.bind(this))
    //   .on('set', this.setTimer.bind(this));

    return [
      this.informationService,
      this.fanService,
      // this.timerService,
      // this.humidityService
    ];
  },

  getTimer: function(next) {
    console.log('get timer');
    next(null, 0);
  },

  setTimer: function(value, next) {
    console.log('set timer', value);
    this.pressButton('timer', next);

    // Simulate the 10 minute timer
    state.button = 'high';
    this.timer = setTimeout(function() {
      state.button = 'low';
    }, 60*60*10);
  },

  getHumidity: function(next) {
    next(null, 2);
  },

  getSpeed: function(next) {
    const speedMap = {
      'low': 0,
      'medium': 1,
      'high': 2,
    };
    console.log('current speed', state.button, speedMap[state.button]);
    next(null, speedMap[state.button]);
  },

  getActive: function (next) {
    console.log('get active', state.button === 'low' ? 0 : 1);
    next(null, state.button === 'low' ? 0 : 1);
  },

  setSpeed: function(value, next) {
    console.log('set speed', value);
    this.transition('speed ' + value, next);
  },

  setActive: function (value, next) {
    console.log('set active', value);
    this.transition(value === 0 ? 'deactivate' : 'activate', next);
  },

  transition: function(action, next) {
    console.log('action', action);
    const transitions = {
      'low': {
        'activate': state.last_button !== 'low' ?  state.last_button : 'high',
        'speed 1': 'medium',
        'speed 2': 'high',
      },
      'medium': {
        'deactivate': 'low',
        'speed 0': 'low',
        'speed 2': 'high',
      },
      'high': {
        'deactivate': 'low',
        'speed 0': 'low',
        'speed 1': 'medium',
      }
    };

    const nextButton = transitions[state.button][action];
    if (nextButton) {
      return this.pressButton(nextButton, next);
    }

    return next(null);
  },

  pressButton: function(button, next, value) {
    const me = this;
    console.log('transition from', state.button, 'to', button);
    state.last_button = state.button;
    state.button = button;
    me.client.publish(me.set_topic, '{"command":"' + button + '"}');

    next(null);
  }
};
